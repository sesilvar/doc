def outer(fun):
  def wrapper(arg):
    print ('wrapper')
	result=fun(arg)
	return result
  return wrapper
  
@outer
def fun1(arg):
  print ('fun1'+arg)
  return 'return fun1'

#带参数的装饰器需要在外面再加一层
def filter(a,b)
  def ourter(fun)
    def wrapper(arg)
		
@filter(a,b)
def fun2(arg)

class object:
  pass

class Province(object):
  memo='one of provinces in the contry' # 静态字段属于类
  
  @staticmethod                         # 静态方法
  def foo():
    print ('it is a static method')
	
  def fop(self):                        # 动态方法
    print (self.Name + 'dynamic method')
	
  @property                             # 特性
  def bar(self):
    print (self.Leader)
	
  def __init__(self,name,capital,leader):  # __init__ 构造函数
    self.Name=name                      # 动态字段属于对象
	self.Capital=capital
	self.Leader=leader
	self.__Private=True                 # 私有字段用双下划线开头
	
  def __Thailand(self):                     # 私有方法用剩下划线开头
    pass
	
  @property
  def Thai(self):
    return self.__Private
  
  @Thai.setter
  def Thai(self,value):
    self.__Private=value
  
  def __del__(self):                     # __del__ 析构函数
    pass
	
  def __call__(self):
    pass
	
	
hebei=Province('河北','石家庄','李阳')
print(hebei.bar)
hebei.fop()
Province.foo()
hebei._Province__Thailand()  #不推荐

hebei.Thai=False
print(hebei.Thai)

hebei()                                 # 执行 __call__ 方法

类的继承和重写方法
class father(object):
  pass
  
class son(father):
  def __init__(self):
  super(son,self)

新式类 object
经典类
多重继承问题  经典类 深度优先 新式类 广度优先
python3 都是广度优先


